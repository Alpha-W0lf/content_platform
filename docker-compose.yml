services:
  api:
    build:
      context: .
      dockerfile: .docker/Dockerfile.api
    ports:
      - "0.0.0.0:8000:8000"  # Bind to all interfaces
      - "0.0.0.0:5678:5678"  # Debug port
    volumes:
      - ./src/backend:/app/src/backend
      - ./alembic.ini:/app/alembic.ini
    depends_on:
      - postgres
      - redis
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:password@postgres:5432/content_platform
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - content-platform
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  celery_worker:
    build:
      context: .
      dockerfile: .docker/Dockerfile.celery
    volumes:
      - ./src/backend:/app/src/backend
    depends_on:
      - api
      - redis
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:password@postgres:5432/content_platform
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - content-platform
    healthcheck:
      test: ["CMD", "celery", "-A", "src.backend.tasks", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: content_platform
      PGUSER: user
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - content-platform
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d content_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - content-platform
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "0.0.0.0:9090:9090"  # Bind to all interfaces
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - content-platform
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "0.0.0.0:3001:3000"  # Bind to all interfaces
    volumes:
      - ./config/grafana:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    networks:
      - content-platform
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: .docker/Dockerfile.frontend
      args:
        - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
        - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
    ports:
      - "0.0.0.0:3000:3000"  # Bind to all interfaces
    environment:
      - NEXT_PUBLIC_API_URL=http://api:8000
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      - NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
      - NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
      - NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/
      - NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
    depends_on:
      - api
    networks:
      - content-platform
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

networks:
  content-platform:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
