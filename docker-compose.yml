services:
  api:
    build:
      context: .
      dockerfile: .docker/Dockerfile.api
    ports:
      - "0.0.0.0:8000:8000" # Bind to all interfaces
      - "0.0.0.0:5678:5678" # Debug port
    volumes:
      - ./src/backend:/app/src/backend
      - ./alembic.ini:/app/alembic.ini
    depends_on:
      - postgres
      - redis
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:password@postgres:5432/content_platform
      - TEST_DATABASE_URL=postgresql+asyncpg://user:password@postgres:5432/test_content_platform
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://:password@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:password@redis:6379/0
      - REDIS_PASSWORD=password
      - PYTHONPYCACHEPREFIX=/tmp/pycache
      - PYDEVD_DISABLE_FILE_VALIDATION=1
    networks:
      - content-platform
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    user: "501:20"

  celery_worker:
    build:
      context: .
      dockerfile: .docker/Dockerfile.celery
    volumes:
      - ./src/backend:/app/src/backend
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql+asyncpg://user:password@postgres:5432/content_platform
      - TEST_DATABASE_URL=postgresql+asyncpg://user:password@postgres:5432/test_content_platform
      - REDIS_URL=redis://:password@redis:6379/0
      - CELERY_BROKER_URL=redis://:password@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:password@redis:6379/0
      - REDIS_PASSWORD=password
      - PYTHONPYCACHEPREFIX=/tmp/pycache
      - PYDEVD_DISABLE_FILE_VALIDATION=1
      - C_FORCE_ROOT=true
    networks:
      - content-platform
    healthcheck:
      test:
        [
          "CMD",
          "celery",
          "-A",
          "src.backend.tasks",
          "inspect",
          "ping",
          "-b",
          "redis://:password@redis:6379/0",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: content_platform
      PGUSER: user
      # Add initialization of Grafana database
      POSTGRES_MULTIPLE_DATABASES: content_platform,test_content_platform,grafana
    command:
      - "postgres"
      - "-c"
      - "hba_file=/etc/postgresql/pg_hba.conf"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Ensure proper mounting of initialization script
      - ./config/postgres/init-databases.sh:/docker-entrypoint-initdb.d/00-init-databases.sh
      - ./config/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./config/postgres/postgres-exporter:/usr/local/bin/postgres-exporter
    networks:
      - content-platform
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d content_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  redis:
    image: redis/redis-stack:latest # Using redis-stack for built-in monitoring
    ports:
      - "6379:6379"
      - "8001:8001" # RedisInsight monitoring port
    volumes:
      - redis_data:/data
    command: redis-stack-server --requirepass ${REDIS_PASSWORD:-password} --save 60 1 --loglevel warning --protected-mode no
    networks:
      - content-platform
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "0.0.0.0:9090:9090" # Bind to all interfaces
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - content-platform
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.5.1
    ports:
      - "0.0.0.0:3001:3000" # Bind to all interfaces
    volumes:
      - ./config/grafana:/etc/grafana/provisioning
      - ./config/grafana/grafana-init.sh:/grafana-init.sh
      - grafana_data:/var/lib/grafana
    environment:
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=user
      - GF_DATABASE_PASSWORD=password
      # Optional performance tuning
      - GF_DATABASE_MAX_OPEN_CONN=300
      - GF_DATABASE_MAX_IDLE_CONN=100
      - GF_DATABASE_CONN_MAX_LIFETIME=14400
      - GF_DATABASE_SSL_MODE=disable
    entrypoint: ["/bin/bash", "/grafana-init.sh"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - content-platform
    healthcheck:
      test:
        ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    user: "0"

  frontend:
    build:
      context: .
      dockerfile: .docker/Dockerfile.frontend
      args:
        - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY
        - NEXT_PUBLIC_CLERK_SIGN_IN_URL
        - NEXT_PUBLIC_CLERK_SIGN_UP_URL
        - NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL
        - NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL
        - NEXT_PUBLIC_API_URL=http://api:8000
    ports:
      - "0.0.0.0:3000:3000" # Bind to all interfaces
    env_file:
      - .env
    environment:
      - NEXT_PUBLIC_API_URL=http://api:8000
    depends_on:
      - api
    networks:
      - content-platform
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

networks:
  content-platform:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
