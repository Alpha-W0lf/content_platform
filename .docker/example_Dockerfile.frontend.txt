# # --- Build Stage ---
# FROM node:18.17.0-slim AS builder
# WORKDIR /app

# # Create logs directory
# RUN mkdir -p /app/build_logs

# # Add curl and additional debugging tools
# RUN apt-get update && apt-get install -y --no-install-recommends \
#     curl \
#     tree \
#     procps \
#     sysstat \
#     && rm -rf /var/lib/apt/lists/*

# # Define build arguments for environment variables
# ARG NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY
# ARG NEXT_PUBLIC_CLERK_SIGN_IN_URL
# ARG NEXT_PUBLIC_CLERK_SIGN_UP_URL
# ARG NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL
# ARG NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL
# ARG NEXT_PUBLIC_API_URL

# # Debug: Print system information
# RUN echo "=== System Information ===" | tee /app/build_logs/01_system_info.log && \
#     echo "Node version: $(node -v)" | tee -a /app/build_logs/01_system_info.log && \
#     echo "NPM version: $(npm -v)" | tee -a /app/build_logs/01_system_info.log && \
#     echo "Operating system: $(uname -a)" | tee -a /app/build_logs/01_system_info.log && \
#     echo "Current working directory: $(pwd)" | tee -a /app/build_logs/01_system_info.log && \
#     echo "Directory contents:" | tee -a /app/build_logs/01_system_info.log && \
#     ls -la | tee -a /app/build_logs/01_system_info.log

# # Debug: Print build arguments as they're received
# RUN echo "\n=== Build Arguments Received ===" | tee /app/build_logs/02_build_args.log && \
#     env | grep NEXT_PUBLIC | tee -a /app/build_logs/02_build_args.log

# # Set environment variables from build args
# ENV NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY
# ENV NEXT_PUBLIC_CLERK_SIGN_IN_URL=$NEXT_PUBLIC_CLERK_SIGN_IN_URL
# ENV NEXT_PUBLIC_CLERK_SIGN_UP_URL=$NEXT_PUBLIC_CLERK_SIGN_UP_URL
# ENV NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=$NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL
# ENV NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=$NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL
# ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL

# # Debug: Print environment variables after setting
# RUN echo "\n=== Environment Variables After ENV Setting ===" && \
#     env | sort

# # Copy only necessary files for package installation
# COPY src/frontend/package*.json ./
# COPY src/frontend/tsconfig*.json ./
# COPY src/frontend/postcss.config.js ./
# COPY src/frontend/tailwind.config.js ./
# COPY src/frontend/next.config.js ./
# COPY src/frontend/components.json ./

# # Debug: Print file structure after copying package files
# RUN echo "\n=== Project Structure After Package Files Copy ===" && \
#     tree -a

# # Install dependencies with specific flags for better security and smaller size
# RUN npm clean-install --no-optional --ignore-scripts && \
#     echo "\n=== NPM Dependencies Installed ===" && \
#     npm list

# # Copy source code
# COPY src/frontend/app ./app
# COPY src/frontend/components ./components
# COPY src/frontend/lib ./lib
# COPY src/frontend/styles ./styles
# COPY src/frontend/types ./types
# COPY src/frontend/middleware.ts ./
# COPY src/frontend/public ./public

# # Debug: Print file structure after copying source code
# RUN echo "\n=== Project Structure After Source Code Copy ===" && \
#     tree -a

# # Debug: Print package.json content
# RUN echo "\n=== Package.json Content ===" && \
#     cat package.json

# # Debug: Print environment before build
# RUN echo "\n=== Environment Variables Before Build ===" && \
#     env | sort

# # Debug: Print expanded system information and resources
# RUN echo "\n=== Extended System Information ===" && \
#     echo "Memory Info:" && free -h && \
#     echo "\nCPU Info:" && lscpu | grep -E '^Thread|^Core|^Socket|^CPU\(' && \
#     echo "\nDisk Space:" && df -h && \
#     echo "\nDirectory Space Usage:" && du -sh /app/* && \
#     echo "\nUlimit Settings:" && ulimit -a

# # Debug: Print npm configuration
# RUN echo "\n=== NPM Configuration ===" && \
#     npm config list && \
#     echo "\nNPM Cache Location:" && npm config get cache && \
#     echo "\nNPM Global Modules:" && npm list -g --depth=0

# # Before installing dependencies, print npm cache info
# RUN echo "\n=== NPM Cache Status Before Install ===" && \
#     npm cache verify && \
#     npm cache ls

# # After installing dependencies, print detailed dependency tree and versions
# RUN echo "\n=== Detailed Dependencies Information ===" && \
#     npm list --all && \
#     echo "\nPackage Lock File Hash:" && \
#     sha256sum package-lock.json && \
#     echo "\nNode Modules Size:" && \
#     du -sh node_modules

# # Before build, verify Next.js configuration
# RUN echo "\n=== Next.js Configuration ===" && \
#     echo "Next.js Config File:" && cat next.config.js && \
#     echo "\nTailwind Config:" && cat tailwind.config.js && \
#     echo "\nPostCSS Config:" && cat postcss.config.js && \
#     echo "\nTypeScript Config:" && cat tsconfig.json

# # Before build, capture complete system state
# RUN echo "\n=== Pre-Build System State ===" | tee /app/build_logs/03_prebuild_state.log && \
#     echo "\nMemory Info:" | tee -a /app/build_logs/03_prebuild_state.log && \
#     free -h | tee -a /app/build_logs/03_prebuild_state.log && \
#     echo "\nDisk Space:" | tee -a /app/build_logs/03_prebuild_state.log && \
#     df -h | tee -a /app/build_logs/03_prebuild_state.log && \
#     echo "\nNode Modules Size:" | tee -a /app/build_logs/03_prebuild_state.log && \
#     du -sh node_modules | tee -a /app/build_logs/03_prebuild_state.log

# # Build the application with detailed logging
# RUN echo "\n=== Starting Next.js Build ===" | tee /app/build_logs/04_build_process.log && \
#     (vmstat 5 5 | tee -a /app/build_logs/04_build_process.log & \
#     NEXT_TELEMETRY_DISABLED=1 npm run build 2>&1 | tee -a /app/build_logs/04_build_process.log) && \
#     echo "=== Build Complete ===" | tee -a /app/build_logs/04_build_process.log && \
#     echo "Build output (.next directory):" | tee -a /app/build_logs/04_build_process.log && \
#     ls -la .next/ | tee -a /app/build_logs/04_build_process.log && \
#     echo "\nFinal Build Size:" | tee -a /app/build_logs/04_build_process.log && \
#     du -sh .next/ | tee -a /app/build_logs/04_build_process.log

# # Create a build summary
# RUN echo "\n=== Build Summary ===" | tee /app/build_logs/05_build_summary.log && \
#     echo "Time: $(date)" | tee -a /app/build_logs/05_build_summary.log && \
#     echo "\nFinal File Structure:" | tee -a /app/build_logs/05_build_summary.log && \
#     tree -a | tee -a /app/build_logs/05_build_summary.log && \
#     echo "\nInstalled Dependencies:" | tee -a /app/build_logs/05_build_summary.log && \
#     npm list --prod | tee -a /app/build_logs/05_build_summary.log

# # --- Runtime Stage ---
# FROM node:18.17.0-slim
# WORKDIR /app

# # Create logs directory in runtime stage
# RUN mkdir -p /app/runtime_logs

# # Add curl and debugging tools
# RUN apt-get update && apt-get install -y --no-install-recommends curl tree && \
#     rm -rf /var/lib/apt/lists/*

# # Create non-root user
# RUN addgroup --system --gid 1001 nodejs && \
#     adduser --system --uid 1001 nextjs && \
#     chown -R nextjs:nodejs /app

# # Debug: Print runtime system information
# RUN echo "\n=== Runtime Stage System Information ===" && \
#     echo "Node version: $(node -v)" && \
#     echo "NPM version: $(npm -v)" && \
#     echo "Operating system: $(uname -a)" && \
#     echo "Current working directory: $(pwd)"

# # Copy only production artifacts
# COPY --from=builder --chown=nextjs:nodejs /app/package*.json ./
# COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
# COPY --from=builder --chown=nextjs:nodejs /app/public ./public
# COPY --from=builder --chown=nextjs:nodejs /app/next.config.js ./

# # Copy build logs to runtime stage
# COPY --from=builder /app/build_logs /app/build_logs

# # Debug: Print copied artifacts
# RUN echo "\n=== Runtime Stage Artifacts ===" && \
#     tree -a

# # Define runtime environment variables
# ARG NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY
# ARG NEXT_PUBLIC_CLERK_SIGN_IN_URL
# ARG NEXT_PUBLIC_CLERK_SIGN_UP_URL
# ARG NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL
# ARG NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL
# ARG NEXT_PUBLIC_API_URL

# # Debug: Print build arguments in runtime stage
# RUN echo "\n=== Runtime Stage Build Arguments ===" && \
#     echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}" && \
#     echo "NEXT_PUBLIC_CLERK_SIGN_IN_URL: ${NEXT_PUBLIC_CLERK_SIGN_IN_URL}" && \
#     echo "NEXT_PUBLIC_CLERK_SIGN_UP_URL: ${NEXT_PUBLIC_CLERK_SIGN_UP_URL}" && \
#     echo "NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL: ${NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL}" && \
#     echo "NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL: ${NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL}" && \
#     echo "NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}"

# # Set environment variables for runtime
# ENV NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY
# ENV NEXT_PUBLIC_CLERK_SIGN_IN_URL=$NEXT_PUBLIC_CLERK_SIGN_IN_URL
# ENV NEXT_PUBLIC_CLERK_SIGN_UP_URL=$NEXT_PUBLIC_CLERK_SIGN_UP_URL
# ENV NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=$NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL
# ENV NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=$NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL
# ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL

# # Debug: Print final environment variables and directory structure
# RUN echo "\n=== Final Runtime Environment ===" && \
#     env | sort && \
#     echo "\n=== Final Directory Structure ===" && \
#     tree -a

# # Install production dependencies only
# ARG NODE_ENV=production
# RUN npm clean-install --omit=dev --no-optional --ignore-scripts && \
#     echo "\n=== Production Dependencies Installed ===" && \
#     npm list --prod

# ENV NODE_ENV=production
# USER nextjs

# # Debug: Print final user context
# RUN echo "\n=== Final User Context ===" && \
#     id && \
#     echo "Home directory: $HOME" && \
#     echo "User: $(whoami)"

# # Runtime resource monitoring setup
# RUN echo "\n=== Runtime Resource Limits ===" && \
#     echo "Max File Descriptors:" && ulimit -n && \
#     echo "\nMax Processes:" && ulimit -u && \
#     echo "\nAvailable Memory:" && free -h && \
#     echo "\nCGroup Information:" && \
#     cat /sys/fs/cgroup/memory.max 2>/dev/null || echo "No CGroup Info Available"

# # Print Next.js runtime configuration
# RUN echo "\n=== Next.js Runtime Configuration ===" && \
#     node -e "console.log('Node.js Heap Limit:', require('v8').getHeapStatistics().heap_size_limit / 1024 / 1024, 'MB')" && \
#     echo "\nNode.js Event Loop Lag Test:" && \
#     node -e "const start = Date.now(); setTimeout(() => { console.log('Event Loop Lag:', Date.now() - start, 'ms'); }, 100);"

# EXPOSE 3000

# # Enhanced healthcheck with more detailed status
# HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
#     CMD curl -f http://localhost:3000/ -o /dev/null -s -w "\nHTTP Response Code: %{http_code}\nTime Total: %{time_total}s\nDNS Resolution: %{time_namelookup}s\nConnect Time: %{time_connect}s\n" || exit 1

# # Enhanced startup command with logging
# CMD ["sh", "-c", "\
#     echo '\n=== Starting Next.js Server ===' | tee -a /app/runtime_logs/server.log && \
#     echo 'Time: '$(date) | tee -a /app/runtime_logs/server.log && \
#     echo 'Memory Status:' | tee -a /app/runtime_logs/server.log && \
#     free -h | tee -a /app/runtime_logs/server.log && \
#     echo 'Starting server...' | tee -a /app/runtime_logs/server.log && \
#     exec node node_modules/.bin/next start 2>&1 | tee -a /app/runtime_logs/server.log"]

# # Volume configuration for logs
# VOLUME ["/app/build_logs", "/app/runtime_logs"]
